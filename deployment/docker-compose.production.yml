version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: mcp-postgres-prod
    environment:
      POSTGRES_DB: mcp_production
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./mcp-server/scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    networks:
      - mcp-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: mcp-redis-prod
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data_prod:/data
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    networks:
      - mcp-network

  # MCP Server
  mcp-server:
    build:
      context: ./mcp-server
      dockerfile: Dockerfile
    container_name: mcp-server-prod
    env_file:
      - ./mcp-server/config/production.env
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/mcp_production
      - REDIS_URL=redis://redis:6379
    ports:
      - "127.0.0.1:3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./mcp-server/logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
      replicas: 2
    networks:
      - mcp-network

  # MCP Frontend
  mcp-fe:
    build:
      context: ./mcp-fe
      dockerfile: Dockerfile.multi-stage
      args:
        - BUILD_ENV=production
        - VITE_LANGCHAIN_BACKEND_URL=http://mcp-server:3001
        - VITE_ENVIRONMENT=production
        - VITE_API_BASE_URL=http://mcp-server:3001/api
    container_name: mcp-fe-prod
    environment:
      - MCP_SERVER_URL=http://mcp-server:3001
    ports:
      - "127.0.0.1:8080:80"
    depends_on:
      mcp-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
      replicas: 2
    networks:
      - mcp-network

  # MCP Gateway (for microservice communication)
  mcp-gateway:
    build:
      context: ./mcp-gateway
      dockerfile: Dockerfile
    container_name: mcp-gateway-prod
    environment:
      - NODE_ENV=production
      - PORT=3003
      - LOG_LEVEL=warn
    ports:
      - "127.0.0.1:3003:3003"
    volumes:
      - ./mcp-gateway/config/production.json:/app/config/config.json:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    networks:
      - mcp-network

  # Individual MCP Services
  x-mcp-service:
    build:
      context: ./mcp-services/x-mcp
      dockerfile: Dockerfile
    container_name: x-mcp-service-prod
    environment:
      - NODE_ENV=production
      - PORT=3010
      - TWITTER_API_KEY=${TWITTER_API_KEY}
      - TWITTER_API_SECRET=${TWITTER_API_SECRET}
      - TWITTER_ACCESS_TOKEN=${TWITTER_ACCESS_TOKEN}
      - TWITTER_ACCESS_SECRET=${TWITTER_ACCESS_SECRET}
    ports:
      - "127.0.0.1:3010:3010"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3010/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    networks:
      - mcp-network

  github-mcp-service:
    build:
      context: ./mcp-services/github-mcp
      dockerfile: Dockerfile
    container_name: github-mcp-service-prod
    environment:
      - NODE_ENV=production
      - PORT=3011
      - GITHUB_PERSONAL_ACCESS_TOKEN=${GITHUB_PERSONAL_ACCESS_TOKEN}
    ports:
      - "127.0.0.1:3011:3011"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3011/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    networks:
      - mcp-network

  # Nginx Load Balancer with SSL
  nginx:
    image: nginx:alpine
    container_name: mcp-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/production/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/production/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - mcp-fe
      - mcp-server
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    networks:
      - mcp-network

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus-prod
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus/production.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_prod:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    networks:
      - mcp-network

  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana-prod
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data_prod:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    networks:
      - mcp-network

  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: mcp-loki-prod
    ports:
      - "127.0.0.1:3100:3100"
    volumes:
      - ./monitoring/loki/production.yml:/etc/loki/local-config.yaml:ro
      - loki_data_prod:/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    networks:
      - mcp-network

  promtail:
    image: grafana/promtail:latest
    container_name: mcp-promtail-prod
    volumes:
      - ./monitoring/promtail/production.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    restart: always
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
    networks:
      - mcp-network

volumes:
  postgres_data_prod:
  redis_data_prod:
  prometheus_data_prod:
  grafana_data_prod:
  loki_data_prod:

networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
    driver_opts:
      com.docker.network.bridge.name: mcp-bridge-prod 