version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: mcp-postgres-test
    environment:
      POSTGRES_DB: mcp_test
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - postgres_data_test:/var/lib/postgresql/data
      - ./mcp-server/scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mcp-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: mcp-redis-test
    command: redis-server --appendonly yes
    volumes:
      - redis_data_test:/data
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mcp-network

  # MCP Server
  mcp-server:
    build:
      context: ./mcp-server
      dockerfile: Dockerfile
    container_name: mcp-server-test
    env_file:
      - ./mcp-server/config/test.env
    environment:
      - NODE_ENV=test
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-password}@postgres:5432/mcp_test
      - REDIS_URL=redis://redis:6379
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./mcp-server/logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - mcp-network

  # MCP Frontend
  mcp-fe:
    build:
      context: ./mcp-fe
      dockerfile: Dockerfile.multi-stage
      args:
        - BUILD_ENV=test
        - VITE_LANGCHAIN_BACKEND_URL=http://mcp-server:3001
        - VITE_ENVIRONMENT=test
        - VITE_API_BASE_URL=http://mcp-server:3001/api
    container_name: mcp-fe-test
    environment:
      - MCP_SERVER_URL=http://mcp-server:3001
    ports:
      - "8080:80"
    depends_on:
      mcp-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - mcp-network

  # MCP Gateway (for microservice communication)
  mcp-gateway:
    build:
      context: ./mcp-gateway
      dockerfile: Dockerfile
    container_name: mcp-gateway-test
    environment:
      - NODE_ENV=test
      - PORT=3003
      - LOG_LEVEL=info
    ports:
      - "3003:3003"
    volumes:
      - ./mcp-gateway/config/test.json:/app/config/config.json
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - mcp-network

  # Individual MCP Services
  x-mcp-service:
    build:
      context: ./mcp-services/x-mcp
      dockerfile: Dockerfile
    container_name: x-mcp-service-test
    environment:
      - NODE_ENV=test
      - PORT=3010
      - TWITTER_API_KEY=${TWITTER_API_KEY}
      - TWITTER_API_SECRET=${TWITTER_API_SECRET}
      - TWITTER_ACCESS_TOKEN=${TWITTER_ACCESS_TOKEN}
      - TWITTER_ACCESS_SECRET=${TWITTER_ACCESS_SECRET}
    ports:
      - "3010:3010"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - mcp-network

  github-mcp-service:
    build:
      context: ./mcp-services/github-mcp
      dockerfile: Dockerfile
    container_name: github-mcp-service-test
    environment:
      - NODE_ENV=test
      - PORT=3011
      - GITHUB_PERSONAL_ACCESS_TOKEN=${GITHUB_PERSONAL_ACCESS_TOKEN}
    ports:
      - "3011:3011"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3011/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - mcp-network

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: mcp-nginx-test
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/test/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/test/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - mcp-fe
      - mcp-server
    restart: unless-stopped
    networks:
      - mcp-network

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus-test
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/test.yml:/etc/prometheus/prometheus.yml
      - prometheus_data_test:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - mcp-network

  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana-test
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data_test:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - mcp-network

volumes:
  postgres_data_test:
  redis_data_test:
  prometheus_data_test:
  grafana_data_test:

networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 